#!/usr/bin/env/ python3

import os
import subprocess
import argparse
import shlex
import re
import glob


def run_process(cmd):
    proc = subprocess.Popen(
        shlex.split(cmd),
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    for line in iter(proc.stdout.readline, b''):
        print(line.rstrip().decode("utf8"))


def groconvert(parmfile, coordfile):
    # Run acpype.py
    cmd = f"{os.path.dirname(__file__)}/lib/acpype.py -p {parmfile} -x {coordfile}"
    run_process(cmd)
    # Remove test files generated by acpype.py
    os.remove("em.mdp")
    os.remove("md.mdp")
    # Rename generate files
    pname, _ = os.path.splitext(parmfile)
    xname, _ = os.path.splitext(coordfile)
    os.rename(f"{pname}_GMX.top", f"{pname}.top")
    os.rename(f"{xname}_GMX.gro", f"{xname}.gro")
    # Fix charge
    with open(f"{pname}.top") as f:
        lines = f.readlines()
    ab_block = [
        i for i, line in enumerate(lines) if re.match(r"\[\s+(atoms|bonds)\s+\]", line)]
    atoms = lines[ab_block[0]:ab_block[1]]
    atoms = [line.replace(line[41:47], line[41:46]) for line in atoms]
    trun = lines[:ab_block[0]]
    trun = trun + atoms + lines[ab_block[1]:]
    with open(f"{pname}.top", "w") as f:
        f.write("".join(trun))
    # Fix Atomtypes
    with open(f"{pname}.top") as f:
        file = f.read()
        file = file.replace("IP", "Na+")
        file = file.replace("NA+", "Na+")
        file = file.replace("IM", "Cl-")
        file = file.replace("CL-", "Cl-")
    with open(f"{pname}.top", "w") as f:
        f.write(file)
    with open(f"{xname}.gro") as f:
        file = f.read()
        file = file.replace("IP", "Na+")
        file = file.replace("NA+", "Na+")
        file = file.replace("IM", "Cl-")
        file = file.replace("CL-", "Cl-")
    with open(f"{xname}.gro", "w") as f:
        f.write(file)


def setrestraint(parmfile):
    pname, _ = os.path.splitext(parmfile)
    # Includes positional restraint file information in topology
    with open(f"{pname}.top") as f:
        lines = f.readlines()
    moltyp_idx = [
        i for i, line in enumerate(lines) if re.match(r"\[ moleculetype \]", line)]
    system_idx = [
        i for i, line in enumerate(lines) if re.match(r"\[ system \]", line)]
    i = moltyp_idx[1] if len(moltyp_idx) >= 2 else system_idx[0]
    posres = sorted(glob.glob("*.itp"),
                    key=lambda x: int(x.split(".")[0][5:]),
                    reverse=True)
    lines[i-1] += "; Include Position restraint file\n"
    for posre in posres:
        name = posre.split(".")[0].upper()
        lines[i-1] += f"#ifdef {name}\n"
        lines[i-1] += f"#include \"{posre}\"\n"
        lines[i-1] += "endif\n"
    lines[i-1] += "\n"
    with open(f"{pname}.top", "w") as f:
        f.write("".join(lines))
    return [posre.split(".")[0].upper() for posre in posres]


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--parm', help='Amber parameter file (.parm)')
    parser.add_argument('-x', '--coord', help='Amber restart file (.rst)')
    args = parser.parse_args()
    groconvert(args.parm, args.coord)
    setrestraint(args.parm)
